/*
Copyright 2022 The Kubeflow Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// NasConfigApplyConfiguration represents a declarative configuration of the NasConfig type for use
// with apply.
type NasConfigApplyConfiguration struct {
	GraphConfig *GraphConfigApplyConfiguration `json:"graphConfig,omitempty"`
	Operations  []OperationApplyConfiguration  `json:"operations,omitempty"`
}

// NasConfigApplyConfiguration constructs a declarative configuration of the NasConfig type for use with
// apply.
func NasConfig() *NasConfigApplyConfiguration {
	return &NasConfigApplyConfiguration{}
}

// WithGraphConfig sets the GraphConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GraphConfig field is set to the value of the last call.
func (b *NasConfigApplyConfiguration) WithGraphConfig(value *GraphConfigApplyConfiguration) *NasConfigApplyConfiguration {
	b.GraphConfig = value
	return b
}

// WithOperations adds the given value to the Operations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Operations field.
func (b *NasConfigApplyConfiguration) WithOperations(values ...*OperationApplyConfiguration) *NasConfigApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOperations")
		}
		b.Operations = append(b.Operations, *values[i])
	}
	return b
}
